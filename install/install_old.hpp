// this file is automatically generated by the install routine
// File:    install.hpp

#ifndef __INSTALL_HEADER
#define __INSTALL_HEADER

#include <beta.hpp>

namespace mc_potts {
    namespace install {

        constexpr int num_sizes = 12;
        constexpr int sizes[] {2, 6, 10, 20, 50, 70, 100, 150, 200, 350, 500, 1000};
        
        template<int N>
        struct opt {
            template<int S>
            using impl = baseline_greschd_sim::impl<S, S, S, addon::std_mt_rng, baseline_greschd_grid, baseline_greschd_matrix>;
        };

        template<>
        struct opt<2> {
            template<int S>
            using impl = greschd_v2_sim::impl<S, S, S, addon::mkl_mt_rng, msk_v0_pbc, msk_v0_c_array_dynamic>; 
        };

        template<>
        struct opt<6> {
            template<int S>
            using impl = greschd_v2_sim::impl<S, S, S, addon::mkl_mt_rng, msk_v1_pbc, msk_v0_c_array_dynamic>; 
        };

        template<>
        struct opt<10> {
            template<int S>
            using impl = greschd_v2_sim::impl<S, S, S, addon::mkl_mt_rng, msk_v1_pbc, msk_v0_c_array_dynamic>; 
        };

        template<>
        struct opt<20> {
            template<int S>
            using impl = greschd_v3_sim::impl<S, S, S, addon::mkl_mt_rng, msk_v1_pbc, msk_v0_c_array_dynamic>; 
        };

        template<>
        struct opt<50> {
            template<int S>
            using impl = greschd_v2_sim::impl<S, S, S, addon::mkl_mt_rng, msk_v1_pbc, msk_v0_c_array_dynamic>; 
        };

        template<>
        struct opt<70> {
            template<int S>
            using impl = greschd_v4_sim::impl<S, S, S, addon::mkl_mt_rng, msk_v1_pbc, msk_v0_c_array_dynamic>; 
        };

        template<>
        struct opt<100> {
            template<int S>
            using impl = greschd_v4_sim::impl<S, S, S, addon::mkl_mt_rng, msk_v1_pbc, msk_v2_dynamic_zip>; 
        };

        template<>
        struct opt<150> {
            template<int S>
            using impl = greschd_v2_sim::impl<S, S, S, addon::mkl_mt_rng, msk_v1_pbc, msk_v0_c_array_dynamic>; 
        };

        template<>
        struct opt<200> {
            template<int S>
            using impl = greschd_v2_sim::impl<S, S, S, addon::mkl_mt_rng, msk_v1_pbc, msk_v2_dynamic_zip>; 
        };

        template<>
        struct opt<350> {
            template<int S>
            using impl = greschd_v2_sim::impl<S, S, S, addon::mkl_mt_rng, msk_v1_pbc, msk_v2_dynamic_zip>; 
        };

        template<>
        struct opt<500> {
            template<int S>
            using impl = greschd_v2_sim::impl<S, S, S, addon::mkl_mt_rng, msk_v1_pbc, msk_v2_dynamic_zip>; 
        };

        template<>
        struct opt<1000> {
            template<int S>
            using impl = greschd_v2_sim::impl<S, S, S, addon::mkl_mt_rng, msk_v1_pbc, msk_v1_zorder>; 
        };

    }// namespace install
}// namespace mc_potts

#endif //__INSTALL_HEADER
